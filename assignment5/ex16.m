Count :=  function(a,b, p) 
  c := p + 1;
  for i in [0..p-1] do
    c := c + LegendreSymbol((i^3 + a * i + b) mod p,p);
  end for;
  return c;
end function;

/*
For 7: 
> ReproduceTable(7);
3  :  1
4  :  4
5  :  3
6  :  6
7  :  4
8  :  6
9  :  4
10  :  6
11  :  3
12  :  4
13  :  1
[ 1, 4, 3, 6, 4, 6, 4, 6, 3, 4, 1 ]

For prime between 100 and 1000:
> ReproduceTable(409);
370  :  510
371  :  408
372  :  1496
373  :  408
374  :  816
375  :  1224
376  :  2448
377  :  612
378  :  2448
379  :  1904
380  :  2448
381  :  816
382  :  1632
383  :  612
384  :  3264
385  :  2448
386  :  1632
387  :  1632
388  :  4284
389  :  1632
390  :  2448
391  :  2040
392  :  2448
393  :  1224
394  :  1632
395  :  816
396  :  6120
397  :  1020
398  :  2040
399  :  2448
400  :  6120
401  :  816
402  :  2448
403  :  1700
404  :  3570
405  :  3060
406  :  3672
407  :  1428
408  :  2448
409  :  1632
410  :  3264
411  :  1632
412  :  2448
413  :  1428
414  :  3672
415  :  3060
416  :  3570
417  :  1700
418  :  2448
419  :  816
420  :  6120
421  :  2448
422  :  2040
423  :  1020
424  :  6120
425  :  816
426  :  1632
427  :  1224
428  :  2448
429  :  2040
430  :  2448
431  :  1632
432  :  4284
433  :  1632
434  :  1632
435  :  2448
436  :  3264
437  :  612
438  :  1632
439  :  816
440  :  2448
441  :  1904
442  :  2448
443  :  612
444  :  2448
445  :  1224
446  :  816
447  :  408
448  :  1496
449  :  408
450  :  510
as list: [ 510, 408, 1496, 408, 816, 1224, 2448, 612, 2448, 1904, 2448, 816, 1632, 612,
3264, 2448, 1632, 1632, 4284, 1632, 2448, 2040, 2448, 1224, 1632, 816, 6120,
1020, 2040, 2448, 6120, 816, 2448, 1700, 3570, 3060, 3672, 1428, 2448, 1632,
3264, 1632, 2448, 1428, 3672, 3060, 3570, 1700, 2448, 816, 6120, 2448, 2040,
1020, 6120, 816, 1632, 1224, 2448, 2040, 2448, 1632, 4284, 1632, 1632, 2448,
3264, 612, 1632, 816, 2448, 1904, 2448, 612, 2448, 1224, 816, 408, 1496, 408,
510 ]
*/
ReproduceTable := function (p)
  lowerbound := Floor(p + 1 - 2 * Sqrt(p)) + 1;
  upperbound := Floor(p + 1 + 2 * Sqrt(p));
  counts := [0:i in [lowerbound..upperbound]];
  for i in [0..p-1] do
    for j in [0..p-1] do
      if (4*i^3 + 27*j^2) mod p ne 0 then
        occ := Count(i,j,p);
        counts[occ-lowerbound+1] := counts[occ-lowerbound+1] + 1;
      end if;
    end for;
  end for;
  for c in counts do
    print lowerbound, " : " ,c;
    lowerbound := lowerbound + 1;
  end for; 
  return counts;
end function;


